//프로그래머스 자릿수 더하기
function solution(n)
{
    var answer = n+'';
    return [...answer].reduce((a,b) => parseInt(a) + parseInt(b),0);
    
}
//한번에 풀이방법이 떠올랐고, 익숙하지 않았던 reduce 함수도 활용해 보았다,
//정수를 문자열로 바꾸는 과정에서 예전에 학습했던 +''를 하는것도 직접 떠올려서 활용도 하며 성장했음을 느낀다.
//이 과정에서 정수로이루어진 문자열을 정수로 바꿀때 parseInt와 Number 함수가 떠올랐는데 어떤 차이가있는지가 궁금해져 차이점에 대해
//학습을 해보았다.
// Number():

// 전달된 값을 숫자로 변환합니다.
// 만약 전달된 값이 숫자가 아니라면, 해당 값이 숫자로 변환될 수 없을 때 NaN을 반환합니다.
// 문자열의 경우 빈 문자열은 0, 숫자로 시작하는 문자열은 해당 숫자로 변환하고, 그렇지 않은 경우에는 NaN을 반환합니다.
// 예시: Number('123')은 123을 반환하고, Number('abc')는 NaN을 반환합니다.

// parseInt():

// 문자열을 해석하고, 해당 문자열이 나타내는 정수를 반환합니다.
// 문자열의 시작부터 숫자를 읽어들이고, 숫자 이후의 문자는 무시합니다. 따라서 숫자 이후에 문자가 나오면 그 문자 이후의 문자열은 무시됩니다.
// 두 번째 매개변수로 진수를 지정할 수 있으며, 기본값은 10입니다. 따라서 문자열이 0x 또는 0X로 시작하면 16진수로 해석됩니다.
// 예시: parseInt('123')은 123을 반환하고, parseInt('123abc')는 123을 반환합니다.

//값이 올바르게 전달된다는 가정하에는 어떤거를 쓰더라도 문제가없겠지만, 그이외의 상황에는 만약 문자열에 빈문자열이 포함될 경우
//Number()함수는 빈 문자열을 0으로 변환해버리기때문에 마치 '0'으로 입력받은거 같은 일이 일어날 수도 있을거같다 생각된다.
//따라서 실전에서는 입력데이터의 사전 처리를 하는작업을 포함하면 어떤것을 사용하더라도 크게 문제가나지는 않을거같다.